import React, { useState, useEffect } from 'react';
import { Group, Member } from '../types';
import { TrashIcon } from './icons/TrashIcon';
import { generateId } from '../services/utils';

interface EditGroupModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUpdateGroup: (group: Group) => void;
  group: Group;
}

const EditGroupModal: React.FC<EditGroupModalProps> = ({ isOpen, onClose, onUpdateGroup, group }) => {
  const [groupName, setGroupName] = useState(group.name);
  const [shareAmount, setShareAmount] = useState(String(group.shareAmount));
  const [members, setMembers] = useState<Member[]>(group.members);
  const [error, setError] = useState('');

  useEffect(() => {
    if (isOpen) {
        setGroupName(group.name);
        setShareAmount(String(group.shareAmount));
        setMembers(group.members);
        setError('');
    }
  }, [isOpen, group]);

  const handleAddMember = () => {
    if (group.lotteryRun) {
      setError('امکان افزودن عضو جدید پس از اجرای قرعه‌کشی وجود ندارد.');
      return;
    }
    setError('');
    setMembers([...members, { id: generateId(), name: '' }]);
  };

  const handleRemoveMember = (id: string) => {
    if (members.length <= 2) {
      setError('یک گروه باید حداقل دو عضو داشته باشد.');
      return;
    }
    if (group.lotteryRun) {
        setError('امکان حذف عضو پس از اجرای قرعه‌کشی وجود ندارد.');
        return;
    }
    setError('');
    setMembers(members.filter(m => m.id !== id));
  };

  const handleMemberNameChange = (id: string, name: string) => {
    if (error) setError('');
    setMembers(members.map(m => m.id === id ? { ...m, name } : m));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    const finalMembers = members.map(m => ({ ...m, name: m.name.trim() })).filter(m => m.name !== '');

    if (!groupName.trim() || !shareAmount || finalMembers.length < 2) {
      setError('لطفاً تمام فیلدها را پر کنید و حداقل دو عضو وارد نمایید.');
      return;
    }
    
    if (group.lotteryRun && (finalMembers.length !== group.members.length)) {
        setError("تعداد اعضا پس از قرعه کشی قابل تغییر نیست.")
        return;
    }
    
    const memberNames = finalMembers.map(m => m.name);
    if (new Set(memberNames).size !== memberNames.length) {
      setError('نام اعضا نمی‌تواند تکراری باشد.');
      return;
    }

    const updatedGroup: Group = {
      ...group,
      name: groupName.trim(),
      shareAmount: parseFloat(shareAmount),
      members: finalMembers,
    };

    onUpdateGroup(updatedGroup);
    onClose();
  };
  
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b flex justify-between items-center">
          <h2 className="text-2xl font-bold text-gray-800">ویرایش گروه</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="بستن">&times;</button>
        </div>
        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          <div>
            <label htmlFor="editGroupName" className="block text-sm font-medium text-gray-700 mb-1">نام گروه</label>
            <input type="text" id="editGroupName" value={groupName} onChange={(e) => { setGroupName(e.target.value); if (error) setError(''); }} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500" required />
          </div>
          <div>
            <label htmlFor="editShareAmount" className="block text-sm font-medium text-gray-700 mb-1">مبلغ سهم ماهانه ({group.currency.symbol})</label>
            <input type="number" min="0" id="editShareAmount" value={shareAmount} onChange={(e) => { setShareAmount(e.target.value); if (error) setError(''); }} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500" required />
          </div>

          <div>
            <h3 className="text-lg font-medium text-gray-700 mb-2">اعضای گروه</h3>
            <div className="space-y-2">
              {members.map((member) => (
                <div key={member.id} className="flex items-center gap-2">
                  <input type="text" placeholder={`نام عضو`} value={member.name} onChange={(e) => handleMemberNameChange(member.id, e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" required />
                  {members.length > 2 && !group.lotteryRun && (
                    <button type="button" onClick={() => handleRemoveMember(member.id)} className="p-2 text-red-500 hover:bg-red-100 rounded-full" aria-label={`حذف ${member.name}`}>
                      <TrashIcon />
                    </button>
                  )}
                </div>
              ))}
            </div>
            {!group.lotteryRun && <button type="button" onClick={handleAddMember} className="mt-2 text-purple-600 font-semibold hover:underline">افزودن عضو جدید</button>}
             {group.lotteryRun && <p className="text-sm text-gray-500 mt-2">تغییر لیست اعضا پس از اجرای قرعه‌کشی ممکن نیست.</p>}
          </div>

          <div className="min-h-[2rem] flex items-center">
            {error && <p className="text-red-500 text-sm" role="alert">{error}</p>}
          </div>
          
          <div className="flex justify-end gap-4 pt-4 border-t">
            <button type="button" onClick={onClose} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors">لغو</button>
            <button type="submit" className="bg-purple-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-purple-700 transition-colors">ذخیره تغییرات</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditGroupModal;